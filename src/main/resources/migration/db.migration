-- \c postgres

-- CREATE ROLE fako WITH ENCRYPTED PASSWORD 'fako' LOGIN CREATEDB;

-- ceci n'est qu un racourci mais pour plus de verbalite, on cree et on reattribut le proprietaire
-- CREATE -h localhost -U fako fako

-- CREATE DATABASE fako;
-- ALTER DATABASE fako OWNER TO fako;

DROP TABLE IF EXISTS dish_ingredient CASCADE;
DROP TABLE IF EXISTS dish CASCADE;
DROP TABLE IF EXISTS ingredient_price_history CASCADE;
DROP TABLE IF EXISTS stock CASCADE;
DROP TABLE IF EXISTS ingredient CASCADE;
DROP TYPE IF EXISTS movement_type CASCADE;
DROP TYPE IF EXISTS unit CASCADE;
DROP TABLE IF EXISTS available_quantity CASCADE;
DROP FUNCTION IF EXISTS update_available_quantity CASCADE;
DROP TABLE IF EXISTS "order" CASCADE;
DROP TABLE IF EXISTS dish_order CASCADE;
DROP TABLE IF EXISTS order_status CASCADE;
DROP TABLE IF EXISTS order_dish_status CASCADE;
DROP TYPE IF EXISTS order_status_type CASCADE;

CREATE TYPE unit AS ENUM('G','L','U');

CREATE TABLE ingredient(
    id_ingredient BIGSERIAL PRIMARY KEY,
    reference_ingredeint varchar(150) UNIQUE,
    name VARCHAR(50) NOT NULL UNIQUE,
    unit unit NOT NULL
);

CREATE TABLE ingredient_price_history(
    id_price BIGSERIAL PRIMARY KEY,
    reference_ingredient_price_history varchar(150) UNIQUE,
    id_ingredient BIGINT NOT NULL,
    date_price DATE NOT NULL DEFAULT CURRENT_DATE,
    unit_price DECIMAL(10,2) NOT NULL,
    CONSTRAINT fk_ingredient FOREIGN KEY (id_ingredient) REFERENCES ingredient(id_ingredient) ON DELETE CASCADE,
    CONSTRAINT unique_price_date UNIQUE (id_ingredient, date_price)
);

CREATE TABLE dish(
    id_dish BIGSERIAL PRIMARY KEY,
    reference_dish varchar(150) UNIQUE,
    name VARCHAR(50) NOT NULL,
    unit_price DECIMAL(10,2) NOT NULL
);

CREATE TABLE dish_ingredient(
    id_dish BIGINT,
    reference_dish_ingredient varchar(150) UNIQUE,
    id_ingredient BIGINT,
    quantity DECIMAL(10,2) NOT NULL,
    unit unit NOT NULL,
    PRIMARY KEY (id_dish, id_ingredient),
    CONSTRAINT fk_ingredient_id FOREIGN KEY (id_ingredient) REFERENCES ingredient(id_ingredient) ON DELETE CASCADE,
    CONSTRAINT fk_dish_id FOREIGN KEY (id_dish) REFERENCES dish(id_dish) ON DELETE CASCADE
);

CREATE TYPE movement_type AS ENUM('IN','OUT');

CREATE TABLE stock(
    id_stock BIGSERIAL PRIMARY KEY,
    reference_stock varchar(150) UNIQUE,
    id_ingredient BIGINT,
    quantity DECIMAL(10,2),
    date_of_movement TIMESTAMP DEFAULT NOW(),
    movement_type movement_type,
    CONSTRAINT pk_stock_id_ingredient FOREIGN KEY (id_ingredient) REFERENCES ingredient(id_ingredient) ON DELETE CASCADE
);

CREATE TABLE available_quantity(
    id_ingredient BIGSERIAL PRIMARY KEY,
    reference_available_quantity varchar(150) UNIQUE,
    available_quantity DECIMAL(10,2),
    date_of_last_movement TIMESTAMP,
    CONSTRAINT pk_available_quantity FOREIGN KEY (id_ingredient) REFERENCES ingredient(id_ingredient) ON DELETE CASCADE
);

CREATE OR REPLACE FUNCTION update_available_quantity()
RETURNS TRIGGER AS $$
DECLARE
    current_quantity DECIMAL(10,2);
BEGIN
    -- Récupérer la quantité disponible actuelle
    SELECT available_quantity INTO current_quantity
    FROM "available_quantity" as aq
    WHERE id_ingredient = NEW.id_ingredient
    FOR UPDATE;

    -- Si c'est un "OUT" et qu'il n'y a pas assez de stock
    IF NEW.movement_type = 'OUT' AND (current_quantity IS NULL OR current_quantity < NEW.quantity) THEN
        RAISE EXCEPTION 'Stock insuffisant pour l''ingrédient %', NEW.id_ingredient;
    END IF;

    -- Mise a jour de la quantite disponible
    INSERT INTO "available_quantity" (id_ingredient, available_quantity, date_of_last_movement)
    VALUES (NEW.id_ingredient,
            COALESCE(current_quantity, 0) + CASE WHEN NEW.movement_type = 'IN' THEN NEW.quantity ELSE -NEW.quantity END,
            NEW.date_of_movement)
    ON CONFLICT (id_ingredient)
    DO UPDATE SET
        available_quantity = "available_quantity".available_quantity + CASE WHEN NEW.movement_type = 'IN' THEN NEW.quantity ELSE -NEW.quantity END,
        date_of_last_movement = NEW.date_of_movement;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Création du trigger sur la table stock
CREATE TRIGGER trg_update_available_quantity
AFTER INSERT ON stock
FOR EACH ROW EXECUTE FUNCTION update_available_quantity();


-----createion de la table commande-----

CREATE TYPE order_status_type AS ENUM(
    'CREATE',
    'CONFIRMED',
    'IN_PREPARATION',
    'DONE',
    'SERVED'
);

CREATE TABLE "order"(
    id_order BIGSERIAL PRIMARY KEY,
    reference_order varchar(150) UNIQUE,
    datetime_of_order TIMESTAMP
);

CREATE TABLE dish_order(
    id_dish_order BIGSERIAL PRIMARY KEY,
    reference_dish_order varchar(150) UNIQUE,
    id_dish BIGSERIAL,
    id_order BIGSERIAL,
    CONSTRAINT pk_dish_order_id_dish FOREIGN KEY (id_dish) REFERENCES dish(id_dish) ON DELETE CASCADE,
    CONSTRAINT pk_dish_order_id_order FOREIGN KEY (id_order) REFERENCES "order"(id_order) ON DELETE CASCADE
);

CREATE TABLE order_status(
    id_order_status BIGSERIAL PRIMARY KEY,
    reference_order_status varchar(150) UNIQUE,
    id_order BIGSERIAL,
    order_status "order_status_type",
    datetime TIMESTAMP,
    CONSTRAINT pk_order_status_id_order FOREIGN KEY (id_order) REFERENCES "order"(id_order) ON DELETE CASCADE
);

CREATE TABLE order_dish_status(
    id_order_disg_status BIGSERIAL PRIMARY KEY,
    reference_dish_status varchar(150) UNIQUE,
    id_order BIGSERIAL,
    id_dish_order BIGSERIAL,
    CONSTRAINT pk_order_dish_status_id_order FOREIGN KEY (id_order) REFERENCES "order"(id_order) ON DELETE CASCADE,
    CONSTRAINT pk_order_dish_status_id_dish_status_order FOREIGN KEY (id_dish_order) REFERENCES dish_order(id_dish_order) ON DELETE CASCADE
);